Microsoft.ApplicationInsights.Channel.ITelemetry
Microsoft.ApplicationInsights.Channel.ITelemetry.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
Microsoft.ApplicationInsights.Channel.ITelemetry.DeepClone() -> Microsoft.ApplicationInsights.Channel.ITelemetry
Microsoft.ApplicationInsights.Channel.ITelemetry.Sanitize() -> void
Microsoft.ApplicationInsights.Channel.ITelemetry.Sequence.get -> string
Microsoft.ApplicationInsights.Channel.ITelemetry.Sequence.set -> void
Microsoft.ApplicationInsights.Channel.ITelemetry.Timestamp.get -> System.DateTimeOffset
Microsoft.ApplicationInsights.Channel.ITelemetry.Timestamp.set -> void
Microsoft.ApplicationInsights.Channel.ITelemetryChannel
Microsoft.ApplicationInsights.Channel.ITelemetryChannel.DeveloperMode.get -> bool?
Microsoft.ApplicationInsights.Channel.ITelemetryChannel.DeveloperMode.set -> void
Microsoft.ApplicationInsights.Channel.ITelemetryChannel.EndpointAddress.get -> string
Microsoft.ApplicationInsights.Channel.ITelemetryChannel.EndpointAddress.set -> void
Microsoft.ApplicationInsights.Channel.ITelemetryChannel.Flush() -> void
Microsoft.ApplicationInsights.Channel.ITelemetryChannel.Send(Microsoft.ApplicationInsights.Channel.ITelemetry item) -> void
Microsoft.ApplicationInsights.Channel.InMemoryChannel
Microsoft.ApplicationInsights.Channel.InMemoryChannel.BacklogSize.get -> int
Microsoft.ApplicationInsights.Channel.InMemoryChannel.BacklogSize.set -> void
Microsoft.ApplicationInsights.Channel.InMemoryChannel.DeveloperMode.get -> bool?
Microsoft.ApplicationInsights.Channel.InMemoryChannel.DeveloperMode.set -> void
Microsoft.ApplicationInsights.Channel.InMemoryChannel.Dispose() -> void
Microsoft.ApplicationInsights.Channel.InMemoryChannel.EndpointAddress.get -> string
Microsoft.ApplicationInsights.Channel.InMemoryChannel.EndpointAddress.set -> void
Microsoft.ApplicationInsights.Channel.InMemoryChannel.Flush() -> void
Microsoft.ApplicationInsights.Channel.InMemoryChannel.Flush(System.TimeSpan timeout) -> void
Microsoft.ApplicationInsights.Channel.InMemoryChannel.InMemoryChannel() -> void
Microsoft.ApplicationInsights.Channel.InMemoryChannel.MaxTelemetryBufferCapacity.get -> int
Microsoft.ApplicationInsights.Channel.InMemoryChannel.MaxTelemetryBufferCapacity.set -> void
Microsoft.ApplicationInsights.Channel.InMemoryChannel.Send(Microsoft.ApplicationInsights.Channel.ITelemetry item) -> void
Microsoft.ApplicationInsights.Channel.InMemoryChannel.SendingInterval.get -> System.TimeSpan
Microsoft.ApplicationInsights.Channel.InMemoryChannel.SendingInterval.set -> void
Microsoft.ApplicationInsights.Channel.Transmission
Microsoft.ApplicationInsights.Channel.Transmission.Content.get -> byte[]
Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding.get -> string
Microsoft.ApplicationInsights.Channel.Transmission.ContentType.get -> string
Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress.get -> System.Uri
Microsoft.ApplicationInsights.Channel.Transmission.Id.get -> string
Microsoft.ApplicationInsights.Channel.Transmission.TelemetryItems.get -> System.Collections.Generic.ICollection<Microsoft.ApplicationInsights.Channel.ITelemetry>
Microsoft.ApplicationInsights.Channel.Transmission.Timeout.get -> System.TimeSpan
Microsoft.ApplicationInsights.Channel.Transmission.Transmission() -> void
Microsoft.ApplicationInsights.Channel.Transmission.Transmission(System.Uri address, System.Collections.Generic.ICollection<Microsoft.ApplicationInsights.Channel.ITelemetry> telemetryItems, System.TimeSpan timeout = default(System.TimeSpan)) -> void
Microsoft.ApplicationInsights.Channel.Transmission.Transmission(System.Uri address, byte[] content, string contentType, string contentEncoding, System.TimeSpan timeout = default(System.TimeSpan)) -> void
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.AvailabilityTelemetry() -> void
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.AvailabilityTelemetry(string name, System.DateTimeOffset timeStamp, System.TimeSpan duration, string runLocation, bool success, string message = null) -> void
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.DeepClone() -> Microsoft.ApplicationInsights.Channel.ITelemetry
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Duration.get -> System.TimeSpan
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Duration.set -> void
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Id.get -> string
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Id.set -> void
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Message.get -> string
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Message.set -> void
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Metrics.get -> System.Collections.Generic.IDictionary<string, double>
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Name.get -> string
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Name.set -> void
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Properties.get -> System.Collections.Generic.IDictionary<string, string>
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.RunLocation.get -> string
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.RunLocation.set -> void
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Sequence.get -> string
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Sequence.set -> void
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Success.get -> bool
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Success.set -> void
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Timestamp.get -> System.DateTimeOffset
Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry.Timestamp.set -> void
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.CommandName.get -> string
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.CommandName.set -> void
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Data.get -> string
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Data.set -> void
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.DependencyKind.get -> string
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.DependencyKind.set -> void
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.DependencyTelemetry() -> void
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.DependencyTelemetry(string dependencyName, string data, System.DateTimeOffset startTime, System.TimeSpan duration, bool success) -> void
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.DependencyTelemetry(string dependencyTypeName, string target, string dependencyName, string data) -> void
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.DependencyTelemetry(string dependencyTypeName, string target, string dependencyName, string data, System.DateTimeOffset startTime, System.TimeSpan duration, string resultCode, bool success) -> void
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.DependencyTypeName.get -> string
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.DependencyTypeName.set -> void
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.ResultCode.get -> string
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.ResultCode.set -> void
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Target.get -> string
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Target.set -> void
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Type.get -> string
Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Type.set -> void
Microsoft.ApplicationInsights.DataContracts.EventTelemetry
Microsoft.ApplicationInsights.DataContracts.EventTelemetry.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
Microsoft.ApplicationInsights.DataContracts.EventTelemetry.DeepClone() -> Microsoft.ApplicationInsights.Channel.ITelemetry
Microsoft.ApplicationInsights.DataContracts.EventTelemetry.EventTelemetry() -> void
Microsoft.ApplicationInsights.DataContracts.EventTelemetry.EventTelemetry(string name) -> void
Microsoft.ApplicationInsights.DataContracts.EventTelemetry.Metrics.get -> System.Collections.Generic.IDictionary<string, double>
Microsoft.ApplicationInsights.DataContracts.EventTelemetry.Name.get -> string
Microsoft.ApplicationInsights.DataContracts.EventTelemetry.Name.set -> void
Microsoft.ApplicationInsights.DataContracts.EventTelemetry.Properties.get -> System.Collections.Generic.IDictionary<string, string>
Microsoft.ApplicationInsights.DataContracts.EventTelemetry.Sequence.get -> string
Microsoft.ApplicationInsights.DataContracts.EventTelemetry.Sequence.set -> void
Microsoft.ApplicationInsights.DataContracts.EventTelemetry.Timestamp.get -> System.DateTimeOffset
Microsoft.ApplicationInsights.DataContracts.EventTelemetry.Timestamp.set -> void
Microsoft.ApplicationInsights.DataContracts.ExceptionHandledAt
Microsoft.ApplicationInsights.DataContracts.ExceptionHandledAt.Platform = 2 -> Microsoft.ApplicationInsights.DataContracts.ExceptionHandledAt
Microsoft.ApplicationInsights.DataContracts.ExceptionHandledAt.Unhandled = 0 -> Microsoft.ApplicationInsights.DataContracts.ExceptionHandledAt
Microsoft.ApplicationInsights.DataContracts.ExceptionHandledAt.UserCode = 1 -> Microsoft.ApplicationInsights.DataContracts.ExceptionHandledAt
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.DeepClone() -> Microsoft.ApplicationInsights.Channel.ITelemetry
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.Exception.get -> System.Exception
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.Exception.set -> void
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.ExceptionTelemetry() -> void
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.ExceptionTelemetry(System.Exception exception) -> void
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.HandledAt.get -> Microsoft.ApplicationInsights.DataContracts.ExceptionHandledAt
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.HandledAt.set -> void
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.Message.get -> string
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.Message.set -> void
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.Metrics.get -> System.Collections.Generic.IDictionary<string, double>
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.ProblemId.get -> string
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.ProblemId.set -> void
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.Properties.get -> System.Collections.Generic.IDictionary<string, string>
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.Sequence.get -> string
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.Sequence.set -> void
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.SeverityLevel.get -> Microsoft.ApplicationInsights.DataContracts.SeverityLevel?
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.SeverityLevel.set -> void
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.Timestamp.get -> System.DateTimeOffset
Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry.Timestamp.set -> void
Microsoft.ApplicationInsights.DataContracts.InnerExceptionCountExceededException
Microsoft.ApplicationInsights.DataContracts.InnerExceptionCountExceededException.InnerExceptionCountExceededException() -> void
Microsoft.ApplicationInsights.DataContracts.InnerExceptionCountExceededException.InnerExceptionCountExceededException(string message) -> void
Microsoft.ApplicationInsights.DataContracts.InnerExceptionCountExceededException.InnerExceptionCountExceededException(string message, System.Exception innerException) -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteComma() -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteEndArray() -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteEndObject() -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteProperty(string name, System.Collections.Generic.IDictionary<string, double> values) -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteProperty(string name, System.Collections.Generic.IDictionary<string, string> values) -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteProperty(string name, System.DateTimeOffset? value) -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteProperty(string name, System.TimeSpan? value) -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteProperty(string name, bool? value) -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteProperty(string name, double? value) -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteProperty(string name, int? value) -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteProperty(string name, string value) -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WritePropertyName(string name) -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteRawValue(object value) -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteStartArray() -> void
Microsoft.ApplicationInsights.DataContracts.IJsonWriter.WriteStartObject() -> void
Microsoft.ApplicationInsights.DataContracts.ISupportMetrics
Microsoft.ApplicationInsights.DataContracts.ISupportMetrics.Metrics.get -> System.Collections.Generic.IDictionary<string, double>
Microsoft.ApplicationInsights.DataContracts.ISupportProperties
Microsoft.ApplicationInsights.DataContracts.ISupportProperties.Properties.get -> System.Collections.Generic.IDictionary<string, string>
Microsoft.ApplicationInsights.DataContracts.ISupportSampling
Microsoft.ApplicationInsights.DataContracts.ISupportSampling.SamplingPercentage.get -> double?
Microsoft.ApplicationInsights.DataContracts.ISupportSampling.SamplingPercentage.set -> void
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Count.get -> int?
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Count.set -> void
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.DeepClone() -> Microsoft.ApplicationInsights.Channel.ITelemetry
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Max.get -> double?
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Max.set -> void
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.MetricTelemetry() -> void
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.MetricTelemetry(string metricName, double metricValue) -> void
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.MetricTelemetry(string name, int count, double sum, double min, double max, double standardDeviation) -> void
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Min.get -> double?
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Min.set -> void
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Name.get -> string
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Name.set -> void
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Properties.get -> System.Collections.Generic.IDictionary<string, string>
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Sequence.get -> string
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Sequence.set -> void
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.StandardDeviation.get -> double?
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.StandardDeviation.set -> void
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Sum.get -> double
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Sum.set -> void
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Timestamp.get -> System.DateTimeOffset
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Timestamp.set -> void
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Value.get -> double
Microsoft.ApplicationInsights.DataContracts.MetricTelemetry.Value.set -> void
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.DeepClone() -> Microsoft.ApplicationInsights.Channel.ITelemetry
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Duration.get -> System.TimeSpan
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Duration.set -> void
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Metrics.get -> System.Collections.Generic.IDictionary<string, double>
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Name.get -> string
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Name.set -> void
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.PageViewTelemetry() -> void
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.PageViewTelemetry(string pageName) -> void
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Properties.get -> System.Collections.Generic.IDictionary<string, string>
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Sequence.get -> string
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Sequence.set -> void
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Timestamp.get -> System.DateTimeOffset
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Timestamp.set -> void
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Url.get -> System.Uri
Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry.Url.set -> void
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.CategoryName.get -> string
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.CategoryName.set -> void
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.CounterName.get -> string
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.CounterName.set -> void
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.DeepClone() -> Microsoft.ApplicationInsights.Channel.ITelemetry
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.InstanceName.get -> string
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.InstanceName.set -> void
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.PerformanceCounterTelemetry() -> void
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.PerformanceCounterTelemetry(string categoryName, string counterName, string instanceName, double value) -> void
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.Properties.get -> System.Collections.Generic.IDictionary<string, string>
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.Sequence.get -> string
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.Sequence.set -> void
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.Timestamp.get -> System.DateTimeOffset
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.Timestamp.set -> void
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.Value.get -> double
Microsoft.ApplicationInsights.DataContracts.PerformanceCounterTelemetry.Value.set -> void
Microsoft.ApplicationInsights.DataContracts.RequestTelemetry
Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.HttpMethod.get -> string
Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.HttpMethod.set -> void
Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.RequestTelemetry() -> void
Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.RequestTelemetry(string name, System.DateTimeOffset startTime, System.TimeSpan duration, string responseCode, bool success) -> void
Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.ResponseCode.get -> string
Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.ResponseCode.set -> void
Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Source.get -> string
Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Source.set -> void
Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Url.get -> System.Uri
Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Url.set -> void
Microsoft.ApplicationInsights.DataContracts.SessionState
Microsoft.ApplicationInsights.DataContracts.SessionState.End = 1 -> Microsoft.ApplicationInsights.DataContracts.SessionState
Microsoft.ApplicationInsights.DataContracts.SessionState.Start = 0 -> Microsoft.ApplicationInsights.DataContracts.SessionState
Microsoft.ApplicationInsights.DataContracts.SessionStateTelemetry
Microsoft.ApplicationInsights.DataContracts.SessionStateTelemetry.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
Microsoft.ApplicationInsights.DataContracts.SessionStateTelemetry.DeepClone() -> Microsoft.ApplicationInsights.Channel.ITelemetry
Microsoft.ApplicationInsights.DataContracts.SessionStateTelemetry.Sequence.get -> string
Microsoft.ApplicationInsights.DataContracts.SessionStateTelemetry.Sequence.set -> void
Microsoft.ApplicationInsights.DataContracts.SessionStateTelemetry.SessionStateTelemetry() -> void
Microsoft.ApplicationInsights.DataContracts.SessionStateTelemetry.SessionStateTelemetry(Microsoft.ApplicationInsights.DataContracts.SessionState state) -> void
Microsoft.ApplicationInsights.DataContracts.SessionStateTelemetry.State.get -> Microsoft.ApplicationInsights.DataContracts.SessionState
Microsoft.ApplicationInsights.DataContracts.SessionStateTelemetry.State.set -> void
Microsoft.ApplicationInsights.DataContracts.SessionStateTelemetry.Timestamp.get -> System.DateTimeOffset
Microsoft.ApplicationInsights.DataContracts.SessionStateTelemetry.Timestamp.set -> void
Microsoft.ApplicationInsights.DataContracts.SeverityLevel
Microsoft.ApplicationInsights.DataContracts.SeverityLevel.Critical = 4 -> Microsoft.ApplicationInsights.DataContracts.SeverityLevel
Microsoft.ApplicationInsights.DataContracts.SeverityLevel.Error = 3 -> Microsoft.ApplicationInsights.DataContracts.SeverityLevel
Microsoft.ApplicationInsights.DataContracts.SeverityLevel.Information = 1 -> Microsoft.ApplicationInsights.DataContracts.SeverityLevel
Microsoft.ApplicationInsights.DataContracts.SeverityLevel.Verbose = 0 -> Microsoft.ApplicationInsights.DataContracts.SeverityLevel
Microsoft.ApplicationInsights.DataContracts.SeverityLevel.Warning = 2 -> Microsoft.ApplicationInsights.DataContracts.SeverityLevel
Microsoft.ApplicationInsights.DataContracts.TelemetryContext
Microsoft.ApplicationInsights.DataContracts.TelemetryContext.Cloud.get -> Microsoft.ApplicationInsights.Extensibility.Implementation.CloudContext
Microsoft.ApplicationInsights.DataContracts.TelemetryContext.Component.get -> Microsoft.ApplicationInsights.Extensibility.Implementation.ComponentContext
Microsoft.ApplicationInsights.DataContracts.TelemetryContext.Device.get -> Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
Microsoft.ApplicationInsights.DataContracts.TelemetryContext.InstrumentationKey.get -> string
Microsoft.ApplicationInsights.DataContracts.TelemetryContext.InstrumentationKey.set -> void
Microsoft.ApplicationInsights.DataContracts.TelemetryContext.Location.get -> Microsoft.ApplicationInsights.Extensibility.Implementation.LocationContext
Microsoft.ApplicationInsights.DataContracts.TelemetryContext.Operation.get -> Microsoft.ApplicationInsights.Extensibility.Implementation.OperationContext
Microsoft.ApplicationInsights.DataContracts.TelemetryContext.Properties.get -> System.Collections.Generic.IDictionary<string, string>
Microsoft.ApplicationInsights.DataContracts.TelemetryContext.GlobalProperties.get -> System.Collections.Generic.IDictionary<string, string>
Microsoft.ApplicationInsights.DataContracts.TelemetryContext.Session.get -> Microsoft.ApplicationInsights.Extensibility.Implementation.SessionContext
Microsoft.ApplicationInsights.DataContracts.TelemetryContext.TelemetryContext() -> void
Microsoft.ApplicationInsights.DataContracts.TelemetryContext.User.get -> Microsoft.ApplicationInsights.Extensibility.Implementation.UserContext
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.DeepClone() -> Microsoft.ApplicationInsights.Channel.ITelemetry
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.Message.get -> string
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.Message.set -> void
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.Properties.get -> System.Collections.Generic.IDictionary<string, string>
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.Sequence.get -> string
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.Sequence.set -> void
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.SeverityLevel.get -> Microsoft.ApplicationInsights.DataContracts.SeverityLevel?
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.SeverityLevel.set -> void
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.Timestamp.get -> System.DateTimeOffset
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.Timestamp.set -> void
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.TraceTelemetry() -> void
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.TraceTelemetry(string message) -> void
Microsoft.ApplicationInsights.DataContracts.TraceTelemetry.TraceTelemetry(string message, Microsoft.ApplicationInsights.DataContracts.SeverityLevel severityLevel) -> void
Microsoft.ApplicationInsights.Extensibility.AutocollectedMetricsExtractor
Microsoft.ApplicationInsights.Extensibility.AutocollectedMetricsExtractor.AutocollectedMetricsExtractor(Microsoft.ApplicationInsights.Extensibility.ITelemetryProcessor nextProcessorInPipeline) -> void
Microsoft.ApplicationInsights.Extensibility.AutocollectedMetricsExtractor.Dispose() -> void
Microsoft.ApplicationInsights.Extensibility.AutocollectedMetricsExtractor.Initialize(Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration configuration) -> void
Microsoft.ApplicationInsights.Extensibility.AutocollectedMetricsExtractor.MaxDependencyTypesToDiscover.get -> int
Microsoft.ApplicationInsights.Extensibility.AutocollectedMetricsExtractor.MaxDependencyTypesToDiscover.set -> void
Microsoft.ApplicationInsights.Extensibility.AutocollectedMetricsExtractor.Process(Microsoft.ApplicationInsights.Channel.ITelemetry item) -> void
Microsoft.ApplicationInsights.Extensibility.IOperationHolder<T>
Microsoft.ApplicationInsights.Extensibility.IOperationHolder<T>.Telemetry.get -> T
Microsoft.ApplicationInsights.Extensibility.ITelemetryInitializer
Microsoft.ApplicationInsights.Extensibility.ITelemetryInitializer.Initialize(Microsoft.ApplicationInsights.Channel.ITelemetry telemetry) -> void
Microsoft.ApplicationInsights.Extensibility.ITelemetryModule
Microsoft.ApplicationInsights.Extensibility.ITelemetryModule.Initialize(Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration configuration) -> void
Microsoft.ApplicationInsights.Extensibility.ITelemetryProcessor
Microsoft.ApplicationInsights.Extensibility.ITelemetryProcessor.Process(Microsoft.ApplicationInsights.Channel.ITelemetry item) -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.CloudContext
Microsoft.ApplicationInsights.Extensibility.Implementation.CloudContext.RoleInstance.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.CloudContext.RoleInstance.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.CloudContext.RoleName.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.CloudContext.RoleName.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.ComponentContext
Microsoft.ApplicationInsights.Extensibility.Implementation.ComponentContext.Version.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.ComponentContext.Version.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Id.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Id.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Language.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Language.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Model.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Model.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.NetworkType.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.NetworkType.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OemName.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OemName.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OperatingSystem.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OperatingSystem.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.ScreenResolution.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.ScreenResolution.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Type.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Type.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper
Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper.Content.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper.Content.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper.RetryAfterHeader.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper.RetryAfterHeader.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper.StatusCode.get -> int
Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper.StatusCode.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper.StatusDescription.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper.StatusDescription.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.InternalContext
Microsoft.ApplicationInsights.Extensibility.Implementation.InternalContext.AgentVersion.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.InternalContext.AgentVersion.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.InternalContext.NodeName.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.InternalContext.NodeName.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.InternalContext.SdkVersion.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.InternalContext.SdkVersion.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.JsonSerializer
Microsoft.ApplicationInsights.Extensibility.Implementation.LocationContext
Microsoft.ApplicationInsights.Extensibility.Implementation.LocationContext.Ip.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.LocationContext.Ip.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationContext
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationContext.CorrelationVector.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationContext.CorrelationVector.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationContext.Id.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationContext.Id.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationContext.Name.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationContext.Name.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationContext.ParentId.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationContext.ParentId.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationContext.SyntheticSource.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationContext.SyntheticSource.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Sanitize() -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.StartTime.get -> System.DateTimeOffset
Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.StartTime.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.SessionContext
Microsoft.ApplicationInsights.Extensibility.Implementation.SessionContext.Id.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.SessionContext.Id.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.SessionContext.IsFirst.get -> bool?
Microsoft.ApplicationInsights.Extensibility.Implementation.SessionContext.IsFirst.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel() -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay.get -> System.TimeSpan
Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose() -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted.get -> bool
Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start(System.Func<System.Threading.Tasks.Task> elapsed) -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryContextExtensions
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryDebugWriter
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryModules
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryModules.Modules.get -> System.Collections.Generic.IList<Microsoft.ApplicationInsights.Extensibility.ITelemetryModule>
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryModules.TelemetryModules() -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryProcessorChain
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryProcessorChain.Dispose() -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryProcessorChain.Process(Microsoft.ApplicationInsights.Channel.ITelemetry item) -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryProcessorChainBuilder
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryProcessorChainBuilder.Build() -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryProcessorChainBuilder.TelemetryProcessorChainBuilder(Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration configuration) -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryProcessorChainBuilder.TelemetryProcessorChainBuilder(Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration configuration, Microsoft.ApplicationInsights.Extensibility.TelemetrySink telemetrySink) -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryProcessorChainBuilder.Use(System.Func<Microsoft.ApplicationInsights.Extensibility.ITelemetryProcessor, Microsoft.ApplicationInsights.Extensibility.ITelemetryProcessor> telemetryProcessorFactory) -> Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryProcessorChainBuilder
Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule
Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule.DiagnosticsInstrumentationKey.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule.DiagnosticsInstrumentationKey.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule.DiagnosticsTelemetryModule() -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule.Dispose() -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule.Initialize(Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration configuration) -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule.Severity.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule.Severity.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.Extensions
Microsoft.ApplicationInsights.Extensibility.Implementation.UserContext
Microsoft.ApplicationInsights.Extensibility.Implementation.UserContext.AccountId.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.UserContext.AccountId.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.UserContext.AuthenticatedUserId.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.UserContext.AuthenticatedUserId.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.UserContext.Id.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.UserContext.Id.set -> void
Microsoft.ApplicationInsights.Extensibility.Implementation.UserContext.UserAgent.get -> string
Microsoft.ApplicationInsights.Extensibility.Implementation.UserContext.UserAgent.set -> void
Microsoft.ApplicationInsights.Extensibility.OperationCorrelationTelemetryInitializer
Microsoft.ApplicationInsights.Extensibility.OperationCorrelationTelemetryInitializer.Initialize(Microsoft.ApplicationInsights.Channel.ITelemetry telemetryItem) -> void
Microsoft.ApplicationInsights.Extensibility.SdkInternalOperationsMonitor
Microsoft.ApplicationInsights.Extensibility.SequencePropertyInitializer
Microsoft.ApplicationInsights.Extensibility.SequencePropertyInitializer.Initialize(Microsoft.ApplicationInsights.Channel.ITelemetry telemetry) -> void
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.DefaultTelemetrySink.get -> Microsoft.ApplicationInsights.Extensibility.TelemetrySink
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.DisableTelemetry.get -> bool
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.DisableTelemetry.set -> void
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.Dispose() -> void
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.InstrumentationKey.get -> string
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.InstrumentationKey.set -> void
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.TelemetryChannel.get -> Microsoft.ApplicationInsights.Channel.ITelemetryChannel
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.TelemetryChannel.set -> void
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.TelemetryConfiguration() -> void
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.TelemetryConfiguration(string instrumentationKey) -> void
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.TelemetryConfiguration(string instrumentationKey, Microsoft.ApplicationInsights.Channel.ITelemetryChannel channel) -> void
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.TelemetryInitializers.get -> System.Collections.Generic.IList<Microsoft.ApplicationInsights.Extensibility.ITelemetryInitializer>
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.TelemetryProcessorChainBuilder.get -> Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryProcessorChainBuilder
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.TelemetryProcessors.get -> System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.ApplicationInsights.Extensibility.ITelemetryProcessor>
Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.TelemetrySinks.get -> System.Collections.Generic.IList<Microsoft.ApplicationInsights.Extensibility.TelemetrySink>
Microsoft.ApplicationInsights.Extensibility.TelemetrySink
Microsoft.ApplicationInsights.Extensibility.TelemetrySink.Dispose() -> void
Microsoft.ApplicationInsights.Extensibility.TelemetrySink.Initialize(Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration configuration) -> void
Microsoft.ApplicationInsights.Extensibility.TelemetrySink.Name.get -> string
Microsoft.ApplicationInsights.Extensibility.TelemetrySink.Name.set -> void
Microsoft.ApplicationInsights.Extensibility.TelemetrySink.Process(Microsoft.ApplicationInsights.Channel.ITelemetry item) -> void
Microsoft.ApplicationInsights.Extensibility.TelemetrySink.TelemetryChannel.get -> Microsoft.ApplicationInsights.Channel.ITelemetryChannel
Microsoft.ApplicationInsights.Extensibility.TelemetrySink.TelemetryChannel.set -> void
Microsoft.ApplicationInsights.Extensibility.TelemetrySink.TelemetryProcessorChainBuilder.get -> Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryProcessorChainBuilder
Microsoft.ApplicationInsights.Extensibility.TelemetrySink.TelemetryProcessorChainBuilder.set -> void
Microsoft.ApplicationInsights.Extensibility.TelemetrySink.TelemetryProcessors.get -> System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.ApplicationInsights.Extensibility.ITelemetryProcessor>
Microsoft.ApplicationInsights.Extensibility.TelemetrySink.TelemetrySink() -> void
Microsoft.ApplicationInsights.Extensibility.TelemetrySink.TelemetrySink(Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration telemetryConfiguration, Microsoft.ApplicationInsights.Channel.ITelemetryChannel telemetryChannel = null) -> void
Microsoft.ApplicationInsights.OperationTelemetryExtensions
Microsoft.ApplicationInsights.TelemetryClient
Microsoft.ApplicationInsights.TelemetryClient.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
Microsoft.ApplicationInsights.TelemetryClient.Flush() -> void
Microsoft.ApplicationInsights.TelemetryClient.Initialize(Microsoft.ApplicationInsights.Channel.ITelemetry telemetry) -> void
Microsoft.ApplicationInsights.TelemetryClient.InstrumentationKey.get -> string
Microsoft.ApplicationInsights.TelemetryClient.InstrumentationKey.set -> void
Microsoft.ApplicationInsights.TelemetryClient.IsEnabled() -> bool
Microsoft.ApplicationInsights.TelemetryClient.TelemetryClient() -> void
Microsoft.ApplicationInsights.TelemetryClient.TelemetryClient(Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration configuration) -> void
Microsoft.ApplicationInsights.TelemetryClient.Track(Microsoft.ApplicationInsights.Channel.ITelemetry telemetry) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackAvailability(Microsoft.ApplicationInsights.DataContracts.AvailabilityTelemetry telemetry) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackAvailability(string name, System.DateTimeOffset timeStamp, System.TimeSpan duration, string runLocation, bool success, string message = null, System.Collections.Generic.IDictionary<string, string> properties = null, System.Collections.Generic.IDictionary<string, double> metrics = null) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackDependency(Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry telemetry) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackDependency(string dependencyName, string data, System.DateTimeOffset startTime, System.TimeSpan duration, bool success) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackDependency(string dependencyTypeName, string target, string dependencyName, string data, System.DateTimeOffset startTime, System.TimeSpan duration, string resultCode, bool success) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackDependency(string dependencyTypeName, string dependencyName, string data, System.DateTimeOffset startTime, System.TimeSpan duration, bool success) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackEvent(Microsoft.ApplicationInsights.DataContracts.EventTelemetry telemetry) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackEvent(string eventName, System.Collections.Generic.IDictionary<string, string> properties = null, System.Collections.Generic.IDictionary<string, double> metrics = null) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackException(Microsoft.ApplicationInsights.DataContracts.ExceptionTelemetry telemetry) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackException(System.Exception exception, System.Collections.Generic.IDictionary<string, string> properties = null, System.Collections.Generic.IDictionary<string, double> metrics = null) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackMetric(Microsoft.ApplicationInsights.DataContracts.MetricTelemetry telemetry) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackMetric(string name, double value, System.Collections.Generic.IDictionary<string, string> properties = null) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackPageView(Microsoft.ApplicationInsights.DataContracts.PageViewTelemetry telemetry) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackPageView(string name) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackRequest(Microsoft.ApplicationInsights.DataContracts.RequestTelemetry request) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackRequest(string name, System.DateTimeOffset startTime, System.TimeSpan duration, string responseCode, bool success) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackTrace(Microsoft.ApplicationInsights.DataContracts.TraceTelemetry telemetry) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackTrace(string message) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackTrace(string message, Microsoft.ApplicationInsights.DataContracts.SeverityLevel severityLevel) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackTrace(string message, Microsoft.ApplicationInsights.DataContracts.SeverityLevel severityLevel, System.Collections.Generic.IDictionary<string, string> properties) -> void
Microsoft.ApplicationInsights.TelemetryClient.TrackTrace(string message, System.Collections.Generic.IDictionary<string, string> properties) -> void
Microsoft.ApplicationInsights.TelemetryClientExtensions
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.DeepClone() -> Microsoft.ApplicationInsights.Channel.ITelemetry
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Duration.get -> System.TimeSpan
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Duration.set -> void
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Id.get -> string
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Id.set -> void
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Metrics.get -> System.Collections.Generic.IDictionary<string, double>
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Name.get -> string
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Name.set -> void
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Properties.get -> System.Collections.Generic.IDictionary<string, string>
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Sequence.get -> string
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Sequence.set -> void
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Success.get -> bool?
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Success.set -> void
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Timestamp.get -> System.DateTimeOffset
abstract Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry.Timestamp.set -> void
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.DeepClone() -> Microsoft.ApplicationInsights.Channel.ITelemetry
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Duration.get -> System.TimeSpan
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Duration.set -> void
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Id.get -> string
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Id.set -> void
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Metrics.get -> System.Collections.Generic.IDictionary<string, double>
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Name.get -> string
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Name.set -> void
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Properties.get -> System.Collections.Generic.IDictionary<string, string>
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Sequence.get -> string
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Sequence.set -> void
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Success.get -> bool?
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Success.set -> void
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Timestamp.get -> System.DateTimeOffset
override Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry.Timestamp.set -> void
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Context.get -> Microsoft.ApplicationInsights.DataContracts.TelemetryContext
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.DeepClone() -> Microsoft.ApplicationInsights.Channel.ITelemetry
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Duration.get -> System.TimeSpan
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Duration.set -> void
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Id.get -> string
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Id.set -> void
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Metrics.get -> System.Collections.Generic.IDictionary<string, double>
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Name.get -> string
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Name.set -> void
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Properties.get -> System.Collections.Generic.IDictionary<string, string>
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Sequence.get -> string
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Sequence.set -> void
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Success.get -> bool?
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Success.set -> void
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Timestamp.get -> System.DateTimeOffset
override Microsoft.ApplicationInsights.DataContracts.RequestTelemetry.Timestamp.set -> void
static Microsoft.ApplicationInsights.Extensibility.Implementation.JsonSerializer.CompressionType.get -> string
static Microsoft.ApplicationInsights.Extensibility.Implementation.JsonSerializer.ContentType.get -> string
static Microsoft.ApplicationInsights.Extensibility.Implementation.JsonSerializer.ConvertToByteArray(string telemetryItems, bool compress = true) -> byte[]
static Microsoft.ApplicationInsights.Extensibility.Implementation.JsonSerializer.Deserialize(byte[] telemetryItemsData, bool compress = true) -> string
static Microsoft.ApplicationInsights.Extensibility.Implementation.JsonSerializer.Serialize(System.Collections.Generic.IEnumerable<Microsoft.ApplicationInsights.Channel.ITelemetry> telemetryItems, bool compress = true) -> byte[]
static Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryContextExtensions.GetInternalContext(this Microsoft.ApplicationInsights.DataContracts.TelemetryContext context) -> Microsoft.ApplicationInsights.Extensibility.Implementation.InternalContext
static Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryDebugWriter.IsTracingDisabled.get -> bool
static Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryDebugWriter.IsTracingDisabled.set -> void
static Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryDebugWriter.WriteTelemetry(Microsoft.ApplicationInsights.Channel.ITelemetry telemetry, string filteredBy = null) -> void
static Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryModules.Instance.get -> Microsoft.ApplicationInsights.Extensibility.Implementation.TelemetryModules
static Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.Extensions.ToInvariantString(this System.Exception exception) -> string
static Microsoft.ApplicationInsights.Extensibility.SdkInternalOperationsMonitor.Enter() -> void
static Microsoft.ApplicationInsights.Extensibility.SdkInternalOperationsMonitor.Exit() -> void
static Microsoft.ApplicationInsights.Extensibility.SdkInternalOperationsMonitor.IsEntered() -> bool
static Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.Active.get -> Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration
static Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.CreateDefault() -> Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration
static Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.CreateFromConfiguration(string config) -> Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration
static Microsoft.ApplicationInsights.OperationTelemetryExtensions.GenerateOperationId(this Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry telemetry) -> void
static Microsoft.ApplicationInsights.OperationTelemetryExtensions.Start(this Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry telemetry) -> void
static Microsoft.ApplicationInsights.OperationTelemetryExtensions.Start(this Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry telemetry, long timestamp) -> void
static Microsoft.ApplicationInsights.OperationTelemetryExtensions.Stop(this Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry telemetry) -> void
static Microsoft.ApplicationInsights.OperationTelemetryExtensions.Stop(this Microsoft.ApplicationInsights.Extensibility.Implementation.OperationTelemetry telemetry, long timestamp) -> void
static Microsoft.ApplicationInsights.TelemetryClientExtensions.StartOperation<T>(this Microsoft.ApplicationInsights.TelemetryClient telemetryClient, T operationTelemetry) -> Microsoft.ApplicationInsights.Extensibility.IOperationHolder<T>
static Microsoft.ApplicationInsights.TelemetryClientExtensions.StartOperation<T>(this Microsoft.ApplicationInsights.TelemetryClient telemetryClient, System.Diagnostics.Activity activity) -> Microsoft.ApplicationInsights.Extensibility.IOperationHolder<T>
static Microsoft.ApplicationInsights.TelemetryClientExtensions.StartOperation<T>(this Microsoft.ApplicationInsights.TelemetryClient telemetryClient, string operationName) -> Microsoft.ApplicationInsights.Extensibility.IOperationHolder<T>
static Microsoft.ApplicationInsights.TelemetryClientExtensions.StartOperation<T>(this Microsoft.ApplicationInsights.TelemetryClient telemetryClient, string operationName, string operationId, string parentOperationId = null) -> Microsoft.ApplicationInsights.Extensibility.IOperationHolder<T>
static Microsoft.ApplicationInsights.TelemetryClientExtensions.StopOperation<T>(this Microsoft.ApplicationInsights.TelemetryClient telemetryClient, Microsoft.ApplicationInsights.Extensibility.IOperationHolder<T> operation) -> void
static readonly Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.InfiniteTimeSpan -> System.TimeSpan
static readonly Microsoft.ApplicationInsights.Extensibility.TelemetrySink.DefaultSinkName -> string
virtual Microsoft.ApplicationInsights.Channel.Transmission.CreateRequestMessage(System.Uri address, System.IO.Stream contentStream) -> System.Net.Http.HttpRequestMessage
virtual Microsoft.ApplicationInsights.Channel.Transmission.SendAsync() -> System.Threading.Tasks.Task<Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper>
virtual Microsoft.ApplicationInsights.Channel.Transmission.Split(System.Func<int, int> calculateLength) -> System.Tuple<Microsoft.ApplicationInsights.Channel.Transmission, Microsoft.ApplicationInsights.Channel.Transmission>